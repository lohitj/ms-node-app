def readProperties(){
	def properties_file_path = "${workspace}" + "/properties.yml"
	def property = readYaml file: properties_file_path

    env.APP_NAME = property.APP_NAME
    env.MS_NAME = property.MS_NAME
    env.BRANCH = property.BRANCH
    env.GIT_SOURCE_URL = property.GIT_SOURCE_URL
    env.GIT_CREDENTIALS = property.GIT_CREDENTIALS
    env.CODE_QUALITY = property.CODE_QUALITY
    env.UNIT_TESTING = property.UNIT_TESTING
    env.CODE_COVERAGE = property.CODE_COVERAGE
    env.FUNCTIONAL_TESTING = property.FUNCTIONAL_TESTING
    env.LOAD_TESTING = property.LOAD_TESTING
    env.SECURITY_TESTING = property.SECURITY_TESTING
    env.LINE = property.LINE
    env.FUNCTION = property.FUNCTION
    env.SECURITY_GATING = property.SECURITY_GATING
    env.BRANCHES = property.BRANCHES
}
def label = "worker-${UUID.randomUUID().toString()}"

podTemplate(label: label, containers: [
  containerTemplate(name: 'node', image: 'node', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.8', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'helm', image: 'lachlanevenson/k8s-helm:latest', command: 'cat', ttyEnabled: true)
],
volumes: [
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
])
{
node(label)
{

   def NODEJS_HOME = tool "NODE_PATH"
   def myRepo = checkout scm
   def gitCommit = myRepo.GIT_COMMIT
   def gitBranch = myRepo.GIT_BRANCH
   def shortGitCommit = "${gitCommit[0..10]}"
    def previousGitCommit = sh(script: "git rev-parse ${gitCommit}~", returnStdout: true)
   env.PATH="${env.PATH}:${NODEJS_HOME}/bin"

   
   stage('Checkout'){
	   
       checkout([$class: 'GitSCM', branches: [[name: "*master"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "", url: "https://github.com/lohitj/ms-node-app"]]])
       env.WORKSPACE = "${workspace}"
	readProperties()
   }
   stage('Test') {
        container('node') {
          checkout([$class: 'GitSCM', branches: [[name: "*master"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "", url: "https://github.com/lohitj/ms-node-app"]]])
       env.WORKSPACE = "${workspace}"
	readProperties()
        }
      }
  
   stage("Install Dependencies")
   {
   	 container('node') 
	 {
        	sh 'npm install -g'
		sh' npm install -g istanbul'
        	sh 'npm i nyc -g'
		sh'npm i --package-lock-only'
		sh """
            	pwd
            	echo "GIT_BRANCH=${gitBranch}" >> /etc/environment
            	echo "GIT_COMMIT=${gitCommit}" >> /etc/environment
            	"""
	 }
   }
   
    if(env.UNIT_TESTING == 'True')
   {
        stage("Unit Test")
	{
		container('node') 
	 	{
			sh 'npm run test'
		}
	}
    }
  
if(env.CODE_COVERAGE == 'True')
{
    stage("Code Coverage")
	{
	container('node') 
	 	{
			sh 'nyc --check-coverage --lines ${LINE} --functions ${FUNCTION} --branches ${BRANCHES} npm test' // all gating in package.json
		}
	}
}
   
   if(env.CODE_QUALITY == 'True')
{
        stage("Code Quality")
	{
		container('node')
		{
			sh 'npm run lint' // .eslint should be changed 
			sh 'npm run lint-console'
		}
	}
}
if(env.SECURITY_TESTING == 'True')
{
     stage("Security Testing")
	{
		container('node')
		{
		   sh ''' npm audit --parseable | awk -F $'\\t' '{count++}  END{if(count > '${SECURITY_GATING}') exit 1}' '''
		}
	}
}
        
    
   
stage('Create Docker images') 
{
  
	container('docker') 
	{
          sh """
            docker login -u lohitjain -p lohitjain1996
            docker build -t namespace/my-image:${gitCommit} .
            docker push namespace/my-image:${gitCommit}
            """
        }
}

   stage('Dev - Deploy Application'){
        devDeployment("${APP_NAME}-dev", "${MS_NAME}")
   }
   
   stage('Tagging Image for Testing'){
        openshiftTag(namespace: '$APP_NAME-dev', srcStream: '$MS_NAME', srcTag: 'latest', destStream: '$MS_NAME', destTag: 'test')
   }
   
   stage('Test - Deploy Application'){
        testDeployment("${APP_NAME}-dev", "${APP_NAME}-test", "${MS_NAME}")
   }

   if(env.FUNCTIONAL_TESTING == 'True'){
        stage('Functional Testing'){
			sh 'npm run functional' //Follow this tutorial https://docs.cucumber.io/guides/10-minute-tutorial/
   		}
   }
   

   stage('Tagging Image for Production'){
        openshiftTag(namespace: '$APP_NAME-dev', srcStream: '$MS_NAME', srcTag: 'latest', destStream: '$MS_NAME', destTag: 'prod')
   }	
    
   stage('Deploy to Production approval'){
        input "Deploy to Production Environment?"
   }
	
   stage('Prod - Deploy Application'){
        prodDeployment("${APP_NAME}-dev", "${APP_NAME}-prod", "${MS_NAME}")
   }	
  
}
}
